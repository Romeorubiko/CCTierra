/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frames;

import cliente.Cliente;
import misc.IP;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Scanner;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger; 
import javax.swing.DefaultComboBoxModel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author raul
 */
public class BienvenidaFrame extends javax.swing.JFrame {
    
    
    
    private Cliente cliente;
    private String ipServer;
    private String puertoServer;
    private boolean root;
    
    private String time;
    
    private final Conexion PConexion;
    private final Enrutamiento PEnrutamiento;
    private final Configuracion PConfiguracion;
    private final BuscadorProcesos PBuscador;
    private final Watchers PWatchers;

    /**
     * Creates new form BienvenidaFrame
     */
    public BienvenidaFrame() {
        initComponents();
        
        PConexion = new Conexion(this);
        PEnrutamiento = new Enrutamiento(this);
        PConfiguracion = new Configuracion(this);
        PBuscador = new BuscadorProcesos(this);
        PWatchers = new Watchers(this);
        
        configMenu();
        configFrame();
        menu_conexionActionPerformed(null);
    }
    
    //creamos cada vista en su container correspondido
    private void configMenu(){
        panel_conexion.add(PConexion);
        panel_conexion.revalidate();
        panel_conexion.repaint();
        
        panel_enrutamiento.add(PEnrutamiento);
        panel_enrutamiento.revalidate();
        panel_enrutamiento.repaint();
        
        panel_configuracion.add(PConfiguracion);
        panel_configuracion.revalidate();
        panel_configuracion.repaint();
        
        panel_buscador_procesos.add(PBuscador);
        panel_buscador_procesos.revalidate();
        panel_buscador_procesos.repaint();
        
        panel_watchers.add(PWatchers);
        panel_watchers.revalidate();
        panel_watchers.repaint();   
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        frame_menu = new javax.swing.JPanel();
        button_exit = new javax.swing.JButton();
        menu_config = new javax.swing.JButton();
        menu_conexion = new javax.swing.JButton();
        menu_enrutamiento = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        menu_buscador_procesos = new javax.swing.JButton();
        menu_watchers = new javax.swing.JButton();
        frame_dinamico = new javax.swing.JPanel();
        panel_conexion = new javax.swing.JPanel();
        panel_enrutamiento = new javax.swing.JPanel();
        panel_configuracion = new javax.swing.JPanel();
        panel_watchers = new javax.swing.JPanel();
        panel_buscador_procesos = new javax.swing.JPanel();
        frame_informacion = new javax.swing.JPanel();
        info_texto_tiempo = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        info_texto_estado = new javax.swing.JLabel();
        info_texto_ip = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        info_texto_puerto = new javax.swing.JLabel();
        jPanel18 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        info_texto_mi_ip = new javax.swing.JLabel();
        info_texto_mi_puerto = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1, 1));
        setPreferredSize(new java.awt.Dimension(850, 681));
        setResizable(false);

        frame_menu.setBackground(new java.awt.Color(32, 97, 175));
        frame_menu.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        frame_menu.setPreferredSize(new java.awt.Dimension(130, 680));
        frame_menu.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        button_exit.setText("Salir");
        button_exit.setToolTipText("Salir y apagar cliente");
        button_exit.setPreferredSize(new java.awt.Dimension(80, 36));
        button_exit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                button_exitMouseClicked(evt);
            }
        });
        button_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_exitActionPerformed(evt);
            }
        });
        frame_menu.add(button_exit, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 625, -1, -1));

        menu_config.setText("Configuración");
        menu_config.setToolTipText("Configurar cliente y servidor.");
        menu_config.setPreferredSize(new java.awt.Dimension(130, 60));
        menu_config.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_configActionPerformed(evt);
            }
        });
        frame_menu.add(menu_config, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 310, 130, -1));

        menu_conexion.setText("Conexión");
        menu_conexion.setToolTipText("Conectar al servidor. Desconectar del servidor. Apagar el servidor");
        menu_conexion.setPreferredSize(new java.awt.Dimension(130, 60));
        menu_conexion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_conexionActionPerformed(evt);
            }
        });
        frame_menu.add(menu_conexion, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, -1, -1));

        menu_enrutamiento.setText("Enrutamiento");
        menu_enrutamiento.setToolTipText("Gestionar tabal de enrutamiento");
        menu_enrutamiento.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        menu_enrutamiento.setPreferredSize(new java.awt.Dimension(130, 60));
        menu_enrutamiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_enrutamientoActionPerformed(evt);
            }
        });
        frame_menu.add(menu_enrutamiento, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 130, -1, -1));

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/logoINTA.png"))); // NOI18N
        frame_menu.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 130, 70));

        menu_buscador_procesos.setText("<html><p>Buscador de</p>\n<p>procesos</p></html>");
        menu_buscador_procesos.setToolTipText("Buscar, realanzar y matar procesos. Activar/desactivar wathcers");
        menu_buscador_procesos.setPreferredSize(new java.awt.Dimension(130, 60));
        menu_buscador_procesos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_buscador_procesosActionPerformed(evt);
            }
        });
        frame_menu.add(menu_buscador_procesos, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 190, -1, -1));

        menu_watchers.setText("Watchers");
        menu_watchers.setToolTipText("Activar/desactivar watchers. Gestionar watchers");
        menu_watchers.setPreferredSize(new java.awt.Dimension(130, 60));
        menu_watchers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_watchersActionPerformed(evt);
            }
        });
        frame_menu.add(menu_watchers, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 250, -1, -1));

        frame_dinamico.setBackground(new java.awt.Color(254, 254, 254));
        frame_dinamico.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        frame_dinamico.setPreferredSize(new java.awt.Dimension(720, 570));
        frame_dinamico.setLayout(new java.awt.CardLayout());

        panel_conexion.setLayout(new javax.swing.BoxLayout(panel_conexion, javax.swing.BoxLayout.LINE_AXIS));
        frame_dinamico.add(panel_conexion, "card_conexion");

        panel_enrutamiento.setPreferredSize(new java.awt.Dimension(720, 570));
        panel_enrutamiento.setLayout(new javax.swing.BoxLayout(panel_enrutamiento, javax.swing.BoxLayout.LINE_AXIS));
        frame_dinamico.add(panel_enrutamiento, "card_enrutamiento");

        panel_configuracion.setLayout(new javax.swing.BoxLayout(panel_configuracion, javax.swing.BoxLayout.LINE_AXIS));
        frame_dinamico.add(panel_configuracion, "card_configuracion");

        panel_watchers.setLayout(new javax.swing.BoxLayout(panel_watchers, javax.swing.BoxLayout.LINE_AXIS));
        frame_dinamico.add(panel_watchers, "card_watchers");

        panel_buscador_procesos.setName(""); // NOI18N
        panel_buscador_procesos.setLayout(new javax.swing.BoxLayout(panel_buscador_procesos, javax.swing.BoxLayout.LINE_AXIS));
        frame_dinamico.add(panel_buscador_procesos, "card_procesos");

        frame_informacion.setBackground(java.awt.Color.white);
        frame_informacion.setPreferredSize(new java.awt.Dimension(720, 110));

        info_texto_tiempo.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        info_texto_tiempo.setText("00:00:00");
        info_texto_tiempo.setToolTipText("Hora");

        jPanel4.setBackground(java.awt.Color.white);
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel4.setToolTipText("Estado cliente");
        jPanel4.setMaximumSize(new java.awt.Dimension(253, 32767));
        jPanel4.setMinimumSize(new java.awt.Dimension(253, 100));

        jLabel1.setText("Estado:");

        info_texto_estado.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        info_texto_estado.setForeground(java.awt.Color.red);
        info_texto_estado.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        info_texto_estado.setText("desconectado");

        info_texto_ip.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        info_texto_ip.setText("000.000.000.000");

        jLabel3.setText("Conexión:");

        info_texto_puerto.setText(":0000");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(info_texto_ip, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(info_texto_puerto))
                    .addComponent(info_texto_estado, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(info_texto_estado))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(info_texto_ip)
                    .addComponent(info_texto_puerto))
                .addGap(8, 8, 8))
        );

        jPanel18.setBackground(java.awt.Color.white);
        jPanel18.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel18.setToolTipText("IP y puerto cliente");
        jPanel18.setMaximumSize(new java.awt.Dimension(253, 32767));
        jPanel18.setMinimumSize(new java.awt.Dimension(253, 0));
        jPanel18.setPreferredSize(new java.awt.Dimension(253, 30));

        jLabel5.setText("Mi IP:");

        info_texto_mi_ip.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        info_texto_mi_ip.setText("000.000.000.000");
        info_texto_mi_ip.setMaximumSize(new java.awt.Dimension(1000, 18));

        info_texto_mi_puerto.setText(":????");

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(info_texto_mi_ip, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(info_texto_mi_puerto, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4))
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(info_texto_mi_ip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(info_texto_mi_puerto)))
        );

        javax.swing.GroupLayout frame_informacionLayout = new javax.swing.GroupLayout(frame_informacion);
        frame_informacion.setLayout(frame_informacionLayout);
        frame_informacionLayout.setHorizontalGroup(
            frame_informacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frame_informacionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frame_informacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel18, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 386, Short.MAX_VALUE)
                .addComponent(info_texto_tiempo, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        frame_informacionLayout.setVerticalGroup(
            frame_informacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frame_informacionLayout.createSequentialGroup()
                .addGroup(frame_informacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, frame_informacionLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(info_texto_tiempo))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, frame_informacionLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(frame_menu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(frame_dinamico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(frame_informacion, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(frame_dinamico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(frame_informacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(frame_menu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button_exitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_button_exitMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_button_exitMouseClicked

    private void menu_configActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_configActionPerformed
        // TODO add your handling code here:
        CardLayout card = (CardLayout)frame_dinamico.getLayout();
        card.show(frame_dinamico, "card_configuracion");
        
        menu_conexion.setSelected(false);
        menu_enrutamiento.setSelected(false);
        menu_buscador_procesos.setSelected(false);
        menu_watchers.setSelected(false);
        menu_config.setSelected(true);

        menu_conexion.setBackground(new Color(234, 232, 230));
        menu_enrutamiento.setBackground(new Color(234, 232, 230));
        menu_buscador_procesos.setBackground(new Color(234, 232, 230));;
        menu_watchers.setBackground(new Color(234, 232, 230));
        menu_config.setBackground(Color.DARK_GRAY);
        
        PConfiguracion.actualizarConfiguracion();
        
    }//GEN-LAST:event_menu_configActionPerformed

    private void menu_conexionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_conexionActionPerformed
        // TODO add your handling code here:
        CardLayout card = (CardLayout)frame_dinamico.getLayout();
        card.show(frame_dinamico, "card_conexion");
        
        menu_conexion.setSelected(true);
        menu_enrutamiento.setSelected(false);
        menu_buscador_procesos.setSelected(false);
        menu_watchers.setSelected(false);
        menu_config.setSelected(false);
        
        menu_conexion.setBackground(Color.DARK_GRAY);
        menu_enrutamiento.setBackground(new Color(234, 232, 230));
        menu_buscador_procesos.setBackground(new Color(234, 232, 230));;
        menu_watchers.setBackground(new Color(234, 232, 230));
        menu_config.setBackground(new Color(234, 232, 230));
        
        PConexion.actualizarConexion();
    }//GEN-LAST:event_menu_conexionActionPerformed

    private void menu_enrutamientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_enrutamientoActionPerformed
        // TODO add your handling code here:
        CardLayout card = (CardLayout)frame_dinamico.getLayout();
        card.show(frame_dinamico, "card_enrutamiento");
        
        menu_conexion.setSelected(false);
        menu_enrutamiento.setSelected(true);
        menu_buscador_procesos.setSelected(false);
        menu_watchers.setSelected(false);
        menu_config.setSelected(false);
        
        menu_conexion.setBackground(new Color(234, 232, 230));
        menu_enrutamiento.setBackground(Color.DARK_GRAY);
        menu_buscador_procesos.setBackground(new Color(234, 232, 230));;
        menu_watchers.setBackground(new Color(234, 232, 230));
        menu_config.setBackground(new Color(234, 232, 230));
        
        PEnrutamiento.actualizarEnrutamiento();
    }//GEN-LAST:event_menu_enrutamientoActionPerformed

    private void menu_buscador_procesosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_buscador_procesosActionPerformed
        // TODO add your handling code here:
        CardLayout card = (CardLayout)frame_dinamico.getLayout();
        card.show(frame_dinamico, "card_procesos");
        
        menu_conexion.setSelected(false);
        menu_enrutamiento.setSelected(false);
        menu_buscador_procesos.setSelected(true);
        menu_watchers.setSelected(false);
        menu_config.setSelected(false);
        
        menu_conexion.setBackground(new Color(234, 232, 230));
        menu_enrutamiento.setBackground(new Color(234, 232, 230));
        menu_buscador_procesos.setBackground(Color.DARK_GRAY);
        menu_watchers.setBackground(new Color(234, 232, 230));
        menu_config.setBackground(new Color(234, 232, 230));
        
        PBuscador.reestablecerProcesoTab();
    }//GEN-LAST:event_menu_buscador_procesosActionPerformed
    
    private void menu_watchersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_watchersActionPerformed
        // TODO add your handling code here:
        CardLayout card = (CardLayout)frame_dinamico.getLayout();
        card.show(frame_dinamico, "card_watchers");
        
        menu_conexion.setSelected(false);
        menu_enrutamiento.setSelected(false);
        menu_buscador_procesos.setSelected(false);
        menu_watchers.setSelected(true);
        menu_config.setSelected(false);
        
        menu_conexion.setBackground(new Color(234, 232, 230));
        menu_enrutamiento.setBackground(new Color(234, 232, 230));
        menu_buscador_procesos.setBackground(new Color(234, 232, 230));
        menu_watchers.setBackground(Color.DARK_GRAY);
        menu_config.setBackground(new Color(234, 232, 230));
                
        PWatchers.actualizarWatchers();
    }//GEN-LAST:event_menu_watchersActionPerformed

    private void button_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_exitActionPerformed
        try {
            PConexion.guardarConexionesRecientes();
        } catch (IOException ex) {
            Logger.getLogger(BienvenidaFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(cliente == null || info_texto_estado.getText().equals("desconectado"))System.exit(0);

        if(!cliente.peticion(String.valueOf(Cliente.DAME_IP)).equals("00")){
            int exit = JOptionPane.showConfirmDialog(frame_dinamico, "El servidor aún sigue corriendo. ¿Desea apagarlo antes de irse?");
            // 0=yes, 1=no, 2=cancel
            if(exit == 0){
                cliente.peticion(String.valueOf(Cliente.APAGAR));
            }
            else if(exit == 2)return;
        }
        System.exit(0);
    }//GEN-LAST:event_button_exitActionPerformed

    private void configFrame(){
        this.setResizable(false);
        this.setBounds(0, 0, 850, 680);
        this.setLocationRelativeTo(null);
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
       

        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
        
        
        //button_exit.setPreferredSize(new Dimension(80,36));
        
        time= new SimpleDateFormat("HH:mm").format(Calendar.getInstance().getTime());
        info_texto_tiempo.setText(time);

        Timer timer = new Timer();
        timer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                time = new SimpleDateFormat("HH:mm:ss").format(Calendar.getInstance().getTime());
                info_texto_tiempo.setText(String.valueOf(time));

            }
        }, 0, 1000);
        
        cambiarADesconectado();
        
        Enumeration<NetworkInterface> en;
        try {
            en = NetworkInterface.getNetworkInterfaces();
            NetworkInterface intf = en.nextElement();
            Enumeration<InetAddress> enumIpAddr = intf.getInetAddresses();
            while (enumIpAddr.hasMoreElements()) {
                InetAddress ipAddr = enumIpAddr.nextElement();
                if(!intf.getName().equals("lo") && !ipAddr.getHostAddress().contains(":")){
                    info_texto_mi_ip.setText(ipAddr.getHostAddress());
                }
            }
        } catch (SocketException ex) {
            Logger.getLogger(BienvenidaFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    //configuración cuando se cambia al estado conectado
    public void cambiarAConectado(){
        info_texto_estado.setText("conectado");
        info_texto_estado.setForeground(Color.green);
        info_texto_ip.setText(cliente.getHostname());
        info_texto_puerto.setText(":"+String.valueOf(cliente.getPuertoServidor()));
        
        menu_config.setEnabled(true);
        menu_enrutamiento.setEnabled(true);
        menu_buscador_procesos.setEnabled(true);
        menu_watchers.setEnabled(true);
        
        PConexion.getConexion_boton_desconectar().setEnabled(true);
        PConexion.getConexion_boton_apagar().setEnabled(true);
        PConexion.getConexion_boton_conectar().setEnabled(false);
        
  
    }
    
    public boolean isConnected(){
        if(info_texto_estado.getText().equals("conectado"))return true;
        else return false;
    }
    
    //configuración cuando se cambia al estado desconectado
    public void cambiarADesconectado(){
        info_texto_estado.setText("desconectado");
        info_texto_estado.setForeground(Color.red);
        info_texto_ip.setText("0.0.0.0");
        info_texto_puerto.setText(":0000");
        
        //volvemos a la tab de conexión y desabilitamos las demás
        menu_config.setEnabled(false);
        menu_enrutamiento.setEnabled(false);
        menu_buscador_procesos.setEnabled(false);
        menu_watchers.setEnabled(false);
        
        CardLayout card = (CardLayout)frame_dinamico.getLayout();
        card.show(frame_dinamico, "card_conexion");
        
        PConexion.getConexion_boton_desconectar().setEnabled(false);
        PConexion.getConexion_boton_conectar().setEnabled(true);
        PConexion.getConexion_boton_apagar().setEnabled(false);
    }
    
    
    public void setCliente(Cliente cliente) {
        this.cliente = cliente;
    }

    public void setIpServer(String ipServer) {
        this.ipServer = ipServer;
    }

    public void setPuertoServer(String puertoServer) {
        this.puertoServer = puertoServer;
    }

    public String getIpServer() {
        return ipServer;
    }

    public String getPuertoServer() {
        return puertoServer;
    }
    
    

    
    public Cliente getCliente(){
        return cliente;
    }
    

    
    public void pop_up(String mensaje){
        JOptionPane.showMessageDialog(frame_dinamico, mensaje);
    }
    
    
    public JLabel getInfo_texto_mi_ip() {
        return info_texto_mi_ip;
    }

    public void setInfo_texto_mi_ip(JLabel info_texto_mi_ip) {
        this.info_texto_mi_ip = info_texto_mi_ip;
    }
    
    public JLabel getInfo_texto_mi_puerto() {
        return info_texto_mi_puerto;
    }

    public void setInfo_texto_mi_puerto(JLabel info_texto_mi_puerto) {
        this.info_texto_mi_puerto = info_texto_mi_puerto;
    }
    
    public boolean isRoot() {
        return root;
    }

    public void setRoot(boolean root) {
        this.root = root;
    }
    
    public  Watchers getPWatchers(){
        return PWatchers;
    }
    
    public Configuracion getPConfiguracion(){
        return PConfiguracion;
    }
    
    public Enrutamiento getPEnrutamiento(){
        return PEnrutamiento;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
         try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BienvenidaFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BienvenidaFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BienvenidaFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BienvenidaFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                System.out.println("////Bienvenido a CCtierra////");
                new BienvenidaFrame().setVisible(true);
            }
        });
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_exit;
    private javax.swing.JPanel frame_dinamico;
    private javax.swing.JPanel frame_informacion;
    private javax.swing.JPanel frame_menu;
    private javax.swing.JLabel info_texto_estado;
    private javax.swing.JLabel info_texto_ip;
    private javax.swing.JLabel info_texto_mi_ip;
    private javax.swing.JLabel info_texto_mi_puerto;
    private javax.swing.JLabel info_texto_puerto;
    private javax.swing.JLabel info_texto_tiempo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JButton menu_buscador_procesos;
    private javax.swing.JButton menu_conexion;
    private javax.swing.JButton menu_config;
    private javax.swing.JButton menu_enrutamiento;
    private javax.swing.JButton menu_watchers;
    private javax.swing.JPanel panel_buscador_procesos;
    private javax.swing.JPanel panel_conexion;
    private javax.swing.JPanel panel_configuracion;
    private javax.swing.JPanel panel_enrutamiento;
    private javax.swing.JPanel panel_watchers;
    // End of variables declaration//GEN-END:variables

   
}
